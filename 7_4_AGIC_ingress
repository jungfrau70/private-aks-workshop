## **1️⃣ Private AKS 접근 아키텍처**

```plaintext
[공중망 로컬PC] --> [Public IP] --> [Application Gateway] --> [Private IP] --> [AKS Internal Service]
                     (Spoke VNET)     (app-gw-subnet)         (aks-subnet)      (ClusterIP)
```

## **2️⃣ 환경 변수 설정**

```bash
# 기본 환경 변수 설정
source ./env.sh

# Application Gateway 정보
APPGW_NAME=AppGateway
SPOKE_VNET_NAME=Spoke_VNET

# Application Gateway IP 정보 가져오기
APPGW_PUBLIC_IP=$(az network public-ip show \
    --resource-group $SPOKE_RG \
    --name $APPGW_NAME-PIP \
    --query ipAddress -o tsv)

APPGW_PRIVATE_IP=$(az network application-gateway frontend-ip list \
    --gateway-name $APPGW_NAME \
    --resource-group $SPOKE_RG \
    --query "[?contains(name, 'Private')].privateIPAddress" -o tsv)

echo "Application Gateway Public IP: $APPGW_PUBLIC_IP"
echo "Application Gateway Private IP: $APPGW_PRIVATE_IP"
```

## **3️⃣ FastAPI 애플리케이션 업데이트**

```bash
# 1. 현재 작업 디렉토리 확인
pwd
cd ~/aks-workshop

# 2. 이미지 태그 환경변수 설정
APP_VERSION=v1.1
echo "APP_VERSION: $APP_VERSION"

# 3. ACR 정보 확인
ACR_NAME=$(az acr list --resource-group $HUB_RG --query "[0].name" -o tsv)
ACR_LOGIN_SERVER=$(az acr show --name $ACR_NAME --resource-group $HUB_RG --query "loginServer" -o tsv)

echo "ACR_NAME: $ACR_NAME"
echo "ACR_LOGIN_SERVER: $ACR_LOGIN_SERVER"

# 4. 이미지 빌드 및 푸시
cd app
az acr build --registry $ACR_NAME --image path-app:$APP_VERSION .

# 5. 배포 업데이트
cd ..
kubectl set image deployment/path-app path-app=$ACR_LOGIN_SERVER/path-app:$APP_VERSION

# 6. 배포 상태 확인
echo "롤아웃 상태:"
kubectl rollout status deployment/path-app

echo "Pod 상태:"
kubectl get pods -l app=path-app

# 7. 새 버전 테스트
POD_NAME=$(kubectl get pod -l app=path-app -o jsonpath='{.items[0].metadata.name}')
echo "Pod 로그:"
kubectl logs $POD_NAME

echo "Health check:"
kubectl exec -it $POD_NAME -- wget -qO- http://localhost/health

echo "Path 테스트:"
kubectl exec -it $POD_NAME -- wget -qO- http://localhost/path
```

이제 FastAPI 애플리케이션이 `/path` 경로에서도 정상적으로 응답할 것입니다. 다음 단계로 AGIC 설정을 진행하면 됩니다.

## **4️⃣ 연결성 테스트**

```bash
# 1. Pod IP로 직접 테스트
POD_IP=$(kubectl get pod -l app=path-app -o jsonpath='{.items[0].status.podIP}')
echo "Pod IP: $POD_IP"

echo "루트 경로 테스트:"
curl $POD_IP:80/

echo "Path 경로 테스트:"
curl $POD_IP:80/path

echo "Health 경로 테스트:"
curl $POD_IP:80/health

# 2. Service IP로 테스트
SERVICE_IP=$(kubectl get service path-app-service -o jsonpath='{.spec.clusterIP}')
echo "Service IP: $SERVICE_IP"

echo "Path 경로 테스트:"
curl $SERVICE_IP:80/path
```

주요 변경사항:
1. `/path` 경로 핸들러 추가
2. HTML 응답 생성 함수 분리
3. 동일한 응답 형식 유지
4. 이미지 버전 업데이트
5. 테스트 명령어 추가

이제 `/path` 경로로 접근해도 동일한 정보 페이지가 표시될 것입니다.

## **5️⃣ Path App Ingress 구성**

```bash
# Ingress 매니페스트 작성
cat << EOF > path-app-ingress.yaml
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: path-app-ingress
  annotations:
    kubernetes.io/ingress.class: azure/application-gateway
    appgw.ingress.kubernetes.io/health-probe-path: /health
    appgw.ingress.kubernetes.io/health-probe-status-codes: "200-399"
    appgw.ingress.kubernetes.io/backend-protocol: http
    appgw.ingress.kubernetes.io/ssl-redirect: "false"  # HTTP 허용
spec:
  rules:
  - http:
      paths:
      - path: /path
        pathType: Prefix
        backend:
          service:
            name: path-app-service
            port:
              number: 80
EOF

# Ingress 배포
kubectl apply -f path-app-ingress.yaml

# Ingress 상태 확인
kubectl get ingress path-app-ingress
kubectl describe ingress path-app-ingress
```

## **6️⃣ Application Gateway 설정 확인**

```bash
# 1. Frontend 포트 확인
echo "Frontend 포트 설정 확인:"
az network application-gateway frontend-port list \
    --gateway-name $APPGW_NAME \
    --resource-group $SPOKE_RG \
    --query "[].{Name:name, Port:port}" \
    --output table

# 2. Frontend IP 설정 확인
echo "Frontend IP 설정 확인:"
az network application-gateway frontend-ip list \
    --gateway-name $APPGW_NAME \
    --resource-group $SPOKE_RG \
    --query "[].{Name:name, Public:publicIPAddress.id, Private:privateIPAddress}" \
    --output table

# 3. 라우팅 규칙 확인
echo "라우팅 규칙 확인:"
az network application-gateway rule list \
    --gateway-name $APPGW_NAME \
    --resource-group $SPOKE_RG \
    --query "[].{Name:name, Listener:httpListener.id, BackendPool:backendAddressPool.id}" \
    --output table

# 4. 백엔드 풀 상태 확인
echo "백엔드 풀 상태:"
az network application-gateway show-backend-health \
    --name $APPGW_NAME \
    --resource-group $SPOKE_RG \
    --output table

# 5. NSG 규칙 확인
echo "NSG 규칙:"
az network nsg rule list \
    --resource-group $SPOKE_RG \
    --nsg-name Appgw_NSG \
    --query "[].{Name:name, Priority:priority, Port:destinationPortRanges, Protocol:protocol}" \
    --output table
```

## **7️⃣ 네트워크 연결성 테스트**

```bash
# 1. Application Gateway 상태 확인
echo "Application Gateway 상태:"
az network application-gateway show \
    --name $APPGW_NAME \
    --resource-group $SPOKE_RG \
    --query "operationalState" \
    -o tsv

# 2. Pod IP 확인
POD_IP=$(kubectl get pod -l app=path-app -o jsonpath='{.items[0].status.podIP}')
echo "Pod IP: $POD_IP"

# 3. Service IP 확인
SERVICE_IP=$(kubectl get service path-app-service -o jsonpath='{.spec.clusterIP}')
echo "Service IP: $SERVICE_IP"

# 4. NSG 규칙 확인
echo "NSG 규칙 확인:"
az network nsg rule list \
    --resource-group $SPOKE_RG \
    --nsg-name Appgw_NSG \
    --query "[].{Name:name, Priority:priority, Direction:direction, Port:destinationPortRanges, Protocol:protocol}" \
    --output table

# 5. 연결성 테스트
echo "Service 연결성 테스트:"
kubectl run -it --rm --restart=Never busybox --image=busybox:1.28 -- wget -qO- http://$SERVICE_IP/health

echo "Pod 직접 연결성 테스트:"
kubectl run -it --rm --restart=Never busybox --image=busybox:1.28 -- wget -qO- http://$POD_IP/health

# 6. Ingress 상태 확인
echo "Ingress 상태:"
kubectl describe ingress path-app-ingress
```

## **8️⃣ Application Gateway 백엔드 풀 설정 확인**

```bash
# 1. 백엔드 풀 목록 확인
echo "백엔드 풀 목록:"
az network application-gateway address-pool list \
    --gateway-name $APPGW_NAME \
    --resource-group $SPOKE_RG \
    --query "[].{Name:name, Backends:backendAddresses}" \
    --output table

# 2. 백엔드 설정 확인
echo "백엔드 설정:"
az network application-gateway show \
    --name $APPGW_NAME \
    --resource-group $SPOKE_RG \
    --query "backendHttpSettingsCollection[].{Name:name, Port:port, Protocol:protocol}" \
    --output table

# 3. 백엔드 상태 상세 확인
echo "백엔드 상태 상세:"
az network application-gateway show-backend-health \
    --name $APPGW_NAME \
    --resource-group $SPOKE_RG \
    --query "backendAddressPools[].{Name:backendAddressPool.name, Health:backendHttpSettingsCollection[].servers[].health}" \
    --output table

# 4. AGIC 로그 확인
echo "AGIC 로그 확인:"
kubectl logs -n kube-system -l app=ingress-azure
```

## **9️⃣ 접근 테스트**

```bash
# 1. IP 정보 확인
echo "APPGW_PUBLIC_IP: $APPGW_PUBLIC_IP"
echo "APPGW_PRIVATE_IP: $APPGW_PRIVATE_IP"

# 2. HTTP 테스트 (Public IP)
echo "Public IP HTTP 테스트:"
curl -I "http://$APPGW_PUBLIC_IP/path"

# 3. HTTP 테스트 (Private IP - Jumpbox에서만 가능)
echo "Private IP HTTP 테스트:"
curl -I "http://$APPGW_PRIVATE_IP/path"

# 4. 상세 응답 확인
echo "상세 응답 확인:"
curl -v "http://$APPGW_PUBLIC_IP/path"
```

주요 확인 사항:
1. Application Gateway가 정상 동작 중인지 확인
2. Pod와 Service가 정상 응답하는지 확인
3. Ingress 규칙이 올바르게 설정되었는지 확인
4. NSG 규칙이 트래픽을 허용하는지 확인
5. 백엔드 풀에 Pod가 정상 등록되었는지 확인

이 테스트를 통해 전체 네트워크 경로의 연결성을 단계별로 확인할 수 있습니다.

## **1️⃣ AGIC 설치 및 구성**

```bash
# 1. AKS 클러스터 ID 가져오기
AKS_ID=$(az aks show \
    --name $AKS_CLUSTER_NAME \
    --resource-group $SPOKE_RG \
    --query id \
    -o tsv)

# 2. Application Gateway ID 가져오기
APPGW_ID=$(az network application-gateway show \
    --name $APPGW_NAME \
    --resource-group $SPOKE_RG \
    --query id \
    -o tsv)

# 3. AGIC Add-on 활성화
echo "AGIC Add-on 활성화:"
az aks enable-addons \
    --name $AKS_CLUSTER_NAME \
    --resource-group $SPOKE_RG \
    --addons ingress-appgw \
    --appgw-id $APPGW_ID

# 4. AGIC 상태 확인
echo "AGIC Pod 상태 확인:"
kubectl get pods -n kube-system -l app=ingress-azure

# 5. AGIC 로그 확인
echo "AGIC 로그 확인:"
kubectl logs -n kube-system -l app=ingress-azure
```

## **2️⃣ AGIC 설정 확인**

```bash
# 1. AGIC 설정 확인
echo "AGIC 설정 확인:"
kubectl get configmap -n kube-system ingress-appgw-cm -o yaml

# 2. AGIC 이벤트 확인
echo "AGIC 이벤트 확인:"
kubectl get events -n kube-system --sort-by='.lastTimestamp' | grep -i "ingress-azure"

# 3. Application Gateway 연결 확인
echo "Application Gateway 연결 상태:"
az network application-gateway show \
    --name $APPGW_NAME \
    --resource-group $SPOKE_RG \
    --query "provisioningState" \
    -o tsv
```

## **3️⃣ Ingress 재구성**

```bash
# 1. 기존 Ingress 삭제
kubectl delete ingress path-app-ingress

# 2. Ingress 매니페스트 작성
cat << EOF > path-app-ingress.yaml
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: path-app-ingress
  annotations:
    kubernetes.io/ingress.class: azure/application-gateway
    appgw.ingress.kubernetes.io/health-probe-path: /health
    appgw.ingress.kubernetes.io/health-probe-status-codes: "200-399"
    appgw.ingress.kubernetes.io/backend-protocol: http
    appgw.ingress.kubernetes.io/ssl-redirect: "false"
    appgw.ingress.kubernetes.io/connection-draining: "true"
    appgw.ingress.kubernetes.io/connection-draining-timeout: "30"
spec:
  rules:
  - http:
      paths:
      - path: /path
        pathType: Prefix
        backend:
          service:
            name: path-app-service
            port:
              number: 80
EOF

# 3. Ingress 배포
kubectl apply -f path-app-ingress.yaml

# 4. Ingress 상태 확인
kubectl get ingress path-app-ingress
kubectl describe ingress path-app-ingress
```

이후 기존의 테스트 단계를 진행하면 됩니다.

주요 변경사항:
1. AGIC Add-on 설치 및 구성 추가
2. AGIC 상태 확인 단계 추가
3. Ingress 설정 개선
4. 연결 드레이닝 설정 추가
5. 상태 확인 경로 명시

이렇게 AGIC를 설치하고 구성하면 Application Gateway와 AKS가 정상적으로 연동되어 웹 페이지 접근이 가능해질 것입니다.